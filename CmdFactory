package com.company;



import java.io.FileInputStream;

import java.io.IOException;

import java.io.InputStream;

import java.util.*;

//import calculator.Commands.CalcCommand;


import java.lang.reflect.InvocationTargetException;

public class CmdFactory {
    private static Properties properties = null;
    private static HashMap<String,CalcCommand> classes = null;

    static {
        classes = new HashMap<String, CalcCommand>();
        InputStream conformacesAsStream = null;
        try {
            conformacesAsStream = new FileInputStream("C:\\Users\\Alex\\IdeaProjects\\Problem2_Calculator\\src\\com\\company\\CmdFactory.properties");
            properties = new Properties();
            properties.load(conformacesAsStream);
        } catch (IOException e){
            System.out.println("IOException occurred in CommandsFactory.properties " + e.getLocalizedMessage());
        } finally {
            try {
                if (null != conformacesAsStream){
                    conformacesAsStream.close();
                }
            }catch (IOException e){
                System.out.println("IOException: " + e.getLocalizedMessage());
            }
        }
    }

    /**
     * Returns CalcCommand command that names cmdName.
     * @param cmdName name of command.
     * @return CalcCommand object <code>command</code> if it exists.
     */
    public static CalcCommand getCommand(String cmdName) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {
//        CalcCommand command;
//        Class<?> cmdClass;

        String commandUp = cmdName.toUpperCase();
        String key = properties.getProperty(commandUp);
        if(null==key){
            throw new NoSuchElementException("Invalid command request: " + commandUp);
        }
        if (!classes.containsKey(key)) {
            //cmdClass = Class.forName(key);
            Class<?> command = Class.forName(key);
            classes.put(cmdName, (CalcCommand) command.getDeclaredConstructor().newInstance());
        }
//        } else {
//            cmdClass = classes.get(cmdName);
//        }
//        command = (CalcCommand) cmdClass.getDeclaredConstructor().newInstance();

        return classes.get(cmdName);
    }
    public static Iterator<Map.Entry<String, CalcCommand>> getIterator(){
       return classes.entrySet().iterator();
    }

}
